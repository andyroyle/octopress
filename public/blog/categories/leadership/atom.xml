<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leadership | toptable Tech Blog]]></title>
  <link href="http://tech.toptable.co.uk/blog/categories/leadership/atom.xml" rel="self"/>
  <link href="http://tech.toptable.co.uk/"/>
  <updated>2014-04-04T17:38:54+01:00</updated>
  <id>http://tech.toptable.co.uk/</id>
  <author>
    <name><![CDATA[toptable]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programme Management, making Agile scale]]></title>
    <link href="http://tech.toptable.co.uk/blog/2014/02/12/programme-management/"/>
    <updated>2014-02-12T10:16:00+00:00</updated>
    <id>http://tech.toptable.co.uk/blog/2014/02/12/programme-management</id>
    <content type="html"><![CDATA[<h2>Popular topic at conferences</h2>

<p>A lot of us were lucky enough to attend NDC London this year, we even sponsored one of the food stalls. I often see one or more real themes coming from talks at conferences. At NDC London I saw three talks around scaling Agile. Indeed Dan North's (<a href="https://twitter.com/tastapod">@tastapod</a>) talk was called exactly that. It is a topic OpenTable is trying to make happen. We are about 100 engineers on three continents which is a lot of teams working together.</p>

<p>I truly believe that the only way to make an individual team successful in an Agile environment is to have ownership of an area, a system or similar. That enables fast feedback, quick decision making and also a sense of pride and responsibility for what people are working on.</p>

<p>However, when you have a big project, you can't give it to just one team. You need many teams working together. You can split it up and get teams to work on the parts of the project affecting the code they own. This will though mean certain parts of the project go faster than others, and if teams are autonomous, who is really responsible for bringing all those pieces together? Also, imagine you are the project owner and need to have a rough handle on when things can actually be delivered, who is going to give you that? None of the individual teams know, everyone is Agile and cool and so everyone hates estimates.</p>

<p>The point made by three speakers at NDC London, <a href="https://twitter.com/tastapod">Dan North</a>, <a href="https://twitter.com/jezhumble">Jez Humble</a> and <a href="https://twitter.com/gojkoadzic">Gojko Adzic</a> came down to the need for the coordination piece across the teams. One thing Dan North (more or less) said is <em>"if your team is really fast and all the others are slow, the project is slow and your team haven't achieved their goal"</em>. That was not the exact words he used but the sentiment came across.</p>

<p>Indeed we have some big projects at OpenTable and as we have properly embraced Agile in many ways, we still had some pain points in this exact area. We were getting to the same conclusions but since these talks we have had some more solid programme management and in the third cross-team meeting as a result, things starting taking shape. It really is an important piece of the jigsaw.</p>

<p>I would also recommend a <a href="http://www.youtube.com/watch?v=ILP1pJAuT9c&amp;list=PLBMFXMTB7U74NdDghygvBaDcp67owVUUF&amp;feature=c4-overview-vl">DevDay talk</a> from Dariusz Dziuk on this and how Spotify make things scale. Slightly different content but a similar theme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20% time: Why, as a manager, you should love your engineers to be doing it]]></title>
    <link href="http://tech.toptable.co.uk/blog/2014/02/06/20-percent-time/"/>
    <updated>2014-02-06T17:12:00+00:00</updated>
    <id>http://tech.toptable.co.uk/blog/2014/02/06/20-percent-time</id>
    <content type="html"><![CDATA[<p>We allow all our UK based developers to have some time to explore new technologies, try out prototypes and clean-up things that escape the day-to-day process. Two days out of ten, seems a lot doesn't it?</p>

<h2>How we started</h2>

<p>We started doing our 20% time when we had two week sprints with a release each sprint. We actually had three days of testing, small bug fixing and signing things off. We didn't like starting our new stories for the next sprint as our QAs got behind and never really caught up. We decided to use this time more for clean-up but also for prototyping or trying something out. We had read of other companies doing something similar so were excited to give it a go.</p>

<p>One of the first times we did this we actually decided we wanted to automate all the testing of one of our systems, so that our QAs weren't bogged down for those three days. In our first 20% time, we got most of the team on board as it was painful watching, let alone doing manual testing and we wanted faster feedback on our changes.</p>

<p>We got a lot of the system in a state we could test it. We basically wrote a lot of a page object model and a few features to talk to it. The next 20% time it needed cleaning up, the next we had a lot under test. With a bit of work the three day test cycle was down to about one day. This would never have happened if we were trying in normal sprint time. Major win number one and something no business owner had had to wrestle against other priorities.</p>

<p>After this instance we have had numerous similar examples, albeit on a smaller scale, where each team has been able to try things out, with no consequence in the event of failure, and achieved great prototypes. Much of our new architecture has been tested out in these sessions, new technologies, new approaches, can people work together?</p>

<h2>Failures, not so bad after all</h2>

<p>Of course, we have had many failures, but maybe even that helps, we won't waste our proper sprint time. Some people ask me about rules when I talk about this. I think the key for me is that the engineers are truly given freedom to explore. If on the face of things something they are doing is completely away from what you are doing then it might seem a bit strange.</p>

<p>But what if they are looking to try something new and would have left your company to do so? What if they think it might be a solution but don't know how to say? What if they can use it in nine months on an urgent project? All these things can and have happened.</p>

<h2>Fear, as always, is detrimental</h2>

<p>Another rule, <em>no fear</em>,  applies in many situations of course. But unlike hackathons where you feel the need to present at the end, presenting should be through excitement of the creator, not demand of the manager.</p>

<h2>Better team as a result</h2>

<p>I have seen our whole UK engineering group get a lot stronger through our use of 20% time. We have also been more attractive in interviews and gets very positive responses when discussing our job openings; so many developers just want an opportunity to learn and apply new skills and will leave a job to do so.</p>

<p>I personally now have a child, attempting to try new skills and experiment at home is proving harder and harder. This 20% time becomes more important &ndash; as a team we are trying to really get to grips with the latest trends in the development community. I just don't have anywhere near as much time in the evenings now, it is a way to stop a divide coming between your team, the ones with spare time and the ones without.</p>

<p>I recommend giving it some serious thought for your organisation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coaching style over substance]]></title>
    <link href="http://tech.toptable.co.uk/blog/2014/02/03/coaching-style-over-substance/"/>
    <updated>2014-02-03T11:12:00+00:00</updated>
    <id>http://tech.toptable.co.uk/blog/2014/02/03/coaching-style-over-substance</id>
    <content type="html"><![CDATA[<p>Have you ever been lucky enough to mentor someone who really got it? Maybe you've had the opposite experience and the session ended up being a failure for both of you?</p>

<p>We are fortunate enough to be in an industry that gives us the chance to coach others and have a direct influence on the learning of individuals around us. But how do we know when we're doing it right, or more importantly what can we do when it starts to go wrong?</p>

<h2>Know your student, find their style</h2>

<p>Let's start with the science behind how we learn.</p>

<p>The first recognised attempt to identify different approaches individuals use in order to learn was David Kolb with the book '<a href="http://www.amazon.co.uk/Experiential-Learning-Experience-Source-Development/dp/0132952610">Experimental Learning</a>'. Kolb suggested that humans have a range of learning techniques available to us and that we tend to lean on one learning style above all others.</p>

<p>In recent times his research has proved to be inaccurate - yes people have different learning styles, yes they  show an emphasis in one particular style but Kolb's definition of separate styles was confused.</p>

<p>Enter <a href="http://en.wikipedia.org/wiki/Learning_styles#Peter_Honey_and_Alan_Mumford.27s_model">Honey and Mumford and their 1999 adaptation on Kolb's model</a>. They identified four distinct learning styles which have since grown to be the preferred assessment of human learning styles.</p>

<table style="font-size: 80%;margin-bottom:20px;">
    <tr>
        <th style="padding:3px;"></th>
        <th style="padding:3px;"><b>Description</b></th>
        <th style="padding:3px;"><b>Learn best</b></th>
        <th style="padding:3px;"><b>Learn worst</b></th>
    </tr>
    <tr style="background-color: #E5E5E5">
        <td style="padding:3px;vertical-align:top;"><b>Activists</b></td>
        <td style="padding:3px;vertical-align:top;">Enjoy doing, tend to act first and think later. They like working with others but often hog the limelight.</td>
        <td style="padding:3px;vertical-align:top;">When involved in new experiences, being thrown in the deep end and leading discussions.</td>
        <td style="padding:3px;vertical-align:top;">Listening to long lectures, reading or writing on their own. Following precise information to the letter.</td>
    </tr>
    <tr>
        <td style="padding:3px;vertical-align:top;"><b>Reflectors</b></td>
        <td style="padding:3px;vertical-align:top;">Like to stand back, listen to others, look at the situation, gather data and carefully come to a conclusion.</td>
        <td style="padding:3px;vertical-align:top;">Observing individuals or teams at work,  reviewing what has happened and what they have learned from it.</td>
        <td style="padding:3px;vertical-align:top;">Acting as a leader in front of others, doing things without preparation, being rushed by deadlines.</td>
    </tr>
    <tr style="background-color: #E5E5E5">
        <td style="padding:3px;vertical-align:top;"><b>Theorists</b></td>
        <td style="padding:3px;vertical-align:top;">Able to adapt and integrate observations into complex theories. Tend to be perfectionists. Detached and analytical rather than emotive.</td>
        <td style="padding:3px;vertical-align:top;">When put into complex and structured situations having to apply their skill and knowledge. Have the chance to question and probe ideas.</td>
        <td style="padding:3px;vertical-align:top;">With unstructured or poorly briefed activities. Will struggle in situations where emphasise is put on emotion or feelings.</td>
    </tr>
    <tr>
        <td style="padding:3px;vertical-align:top;"><b>Pragmatists</b></td>
        <td style="padding:3px;vertical-align:top;">Practical and down to earth. Keen to try things out they can be impatient especially with long discussions.</td>
        <td style="padding:3px;vertical-align:top;">Respond well to demonstrations of techniques that show an obvious advantage.</td>
        <td style="padding:3px;vertical-align:top;">Learning is all theory. No guidelines on how to accomplish activity. No apparent pay back.</td>
    </tr>
</table>


<p>The important thing to remember is not all individuals can be pigeon-holed into one group. These characteristics are evident across all industries and teams; I can certainly see myself and others in this list. Can you?</p>

<p>Now we can silo and identify behaviour, we can look deeper into the flow of learning.</p>

<h2>Complete the circle</h2>

<p>Let me introduce you to <a href="http://www.linkedin.com/pub/bernice-mccarthy/15/564/715">Bernice McCarthy</a>. Bernice has been in education for more than 30 years so it's not surprising she has an insight into her field. During her time in education she spotted a pattern and designed a framework that increased the success rate of individual learning.</p>

<p>Research suggests that this framework (<a href="http://www.4mat.eu/">4MAT</a>) is proven to be successful as it follows the thought processes of individuals when they try to learn. It works by explaining not just the WHY? but also the WHAT?, the HOW? and the WHAT IF?</p>

<p><img src="http://www.chowamigo.co.uk/images/4mat.png" alt="image" /></p>

<ol>
<li><p>WHY? => Convey the meaning and purpose of the change in order to engage people. <strong>Engage the why</strong>.</p></li>
<li><p>WHAT? => Once it's made relevant provide facts, structure or theory to explain what is going to happen. <strong>Inform the what</strong>.</p></li>
<li><p>HOW? => Focus on the problems and how best to solve them. <strong>Applying the how</strong>.</p></li>
<li><p>WHAT IF? => Ask questions and experiment. What else, what's next. <strong>Learn by doing</strong>.</p></li>
</ol>


<p>So how is this helpful?</p>

<p>If we look at the the 4MAT framework and overlay the 4 learning styles from Honey and Mumford we can see some obvious similarites:</p>

<p>PRAGMATISTS = WHY?</p>

<p>ACTIVISTS = WHAT?</p>

<p>THEORISTS = HOW?</p>

<p>ACTIVISTS = WHAT IF?</p>

<p>This is really useful to know, by following the 4MAT framework you are reaching out to each learning style and increasing your chances of being successful in your role as a coach, mentor or teacher.</p>

<h2>Theory schmery, how does this work in practice?</h2>

<p>It's easy enough for us to read this information and take it in, forget about it, move on.</p>

<p>But if we look at a real-world scenario, something that is relevant to our industry and is generally a tough problem to sell it'll make it more tangible. In my world, that can be breaking apart a legacy application that has become too difficult to work with.</p>

<p><strong>WHY?</strong>
We have a monolithic website right now. The code is too complicated, has no obvious structure and is very tough to change. We need to be able to release solid code, fast.</p>

<p><strong>WHAT?</strong>
The fact is we are struggling to maintain this application and we can forget about adding new features. Even small updates are causing outages. As a result our site performance has degraded to unacceptable levels.</p>

<p><strong>HOW?</strong>
The initial thought from the team is to break the monolith into identifiable pieces of functionality. We will try to get each piece behind an API. We hope to abstract the front-end code away so it communicates to these new endpoints.</p>

<p><strong>WHAT IF?</strong>
What if we refactor with the MVP pattern first and see where the duplication lies? Is there an argument to leave the non-urgent areas of the site until the appetite is there to attack them? We think REST APIs are the way to go, what are your thoughts?</p>

<h2>Do, there is no try</h2>

<p>Outlining and truly grasping these styles can really help push learning in your team further. Try reaching out to different learning styles and see how people respond.</p>

<p>Maybe you are pairing on a tricky feature, struggling to get your point across. Perhaps you have a tough decision that you need to sell to your team. Let's say you are lucky enough to speak at a conference in front of hundreds of delegates - you could do a lot worse than to remember <strong>WHY?</strong>   <strong>WHAT?</strong> <strong>HOW? </strong> <strong>WHAT IF?</strong></p>
]]></content>
  </entry>
  
</feed>
